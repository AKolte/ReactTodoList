{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/Task.jsx","components/AddTask.jsx","components/Tasklist.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","Component","task","state","taskData","this","props","id","String","console","log","className","type","onChange","handleStatusChange","defaultChecked","status","title","value","onClick","handleDeleteTask","AddTask","placeholder","handleAddTask","taskList","filter","filters","tasks","switchStatus","index","indexOf","setState","deleteTask","i","filterTasks","addTask","document","getElementById","push","role","map","Task","ReactDOM","render","Tasklist","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"oNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8CCjBgBC,Y,OC4BPC,E,4MA1BXC,MAAQ,G,uDAEJ,IAAIC,EAASC,KAAKC,MAAMF,SACpBG,EAAK,IAAMC,OAAOJ,EAASG,IAE/B,OADAE,QAAQC,IAAIN,GAEV,6BACE,wBAAIO,UAAU,wBACZ,2BACEC,KAAK,WACLD,UAAU,OACVE,SAAUR,KAAKC,MAAMQ,mBACrBC,eAAgBX,EAASY,OACzBT,GAAIA,IAEHH,EAASa,MACV,2BAAOL,KAAK,SACZD,UAAU,iBACVO,MAAM,SACNC,QAASd,KAAKC,MAAMc,yB,GApBjBnB,aC2BJoB,E,uKAxBP,OACE,yBAAKV,UAAU,YACb,yBAAKA,UAAU,eACb,2BACEC,KAAK,OACLL,GAAG,eACHI,UAAU,eACVW,YAAY,iBAEd,0BAAMX,UAAU,mBACd,4BACEA,UAAU,kBACVC,KAAK,SACLO,QAASd,KAAKC,MAAMiB,eAHtB,c,GAbMtB,aCkFPuB,E,4MA/EbrB,MAAQ,CACRI,GAAG,EACHkB,OAAO,MACPC,QAAQ,CAAC,MAAM,YAAY,WAC3BC,MAAM,CACJ,CAACV,MAAM,YAAaD,QAAO,GAC3B,CAACC,MAAM,YAAaD,QAAO,K,EAI7BY,aAAa,SAAC1B,GACZ,IAAMyB,EAAK,YAAO,EAAKxB,MAAMwB,OACvBE,EAAQF,EAAMG,QAAQ5B,GAC5ByB,EAAME,GAAOb,QAAOd,EAAKc,OACzB,EAAKe,SAASJ,GACdlB,QAAQC,IAAI,EAAKP,MAAMwB,MAAME,GAAOb,S,EAGtCgB,WAAW,SAAC9B,GACV,IAAIyB,EAAK,YAAO,EAAKxB,MAAMwB,OAC3BA,EAAMA,EAAMF,QAAO,SAACQ,GAAD,OAAMA,GAAG/B,KAC5B,EAAK6B,SAAS,CAACJ,MAAMA,IACrBlB,QAAQC,IAAIiB,I,EAGdO,YAAY,SAAChC,GACX,MAAsB,OAAnB,EAAKC,MAAMsB,SAEU,aAAnB,EAAKtB,MAAMsB,OAA8BvB,EAAKc,QACnCd,EAAKc,S,EAIvBmB,QAAQ,WACN,IAAIlB,EAAQmB,SAASC,eAAe,gBAAgBnB,MAChDS,EAAM,EAAKxB,MAAMwB,MACrBA,EAAMW,KAAK,CAACrB,MAAMA,EAAOD,QAAO,IAChC,EAAKe,SAASJ,GACdlB,QAAQC,IAAIiB,I,uDAIJ,IAAD,OACL,OACA,6BAEA,yBAAKhB,UAAU,gCACb,yBAAKA,UAAU,YAAY4B,KAAK,SAC7BlC,KAAKF,MAAMuB,QAAQc,KAAI,SAACP,GAAD,OACtB,4BACErB,KAAK,SACLO,QAAS,kBAAM,EAAKY,SAAS,CAAEN,OAAQQ,KACvCtB,UAAU,mBACTsB,QAMT,kBAAC,EAAD,CACEV,cAAelB,KAAK8B,UAGlB,wBAAIxB,UAAU,cACXN,KAAKF,MAAMwB,MACTF,QAAO,SAACvB,GAAD,OAAU,EAAKgC,YAAYhC,MAClCsC,KAAI,SAACP,GAAD,OACH,kBAACQ,EAAD,CACE3B,mBAAoB,kBAAM,EAAKc,aAAaK,IAC5Cb,iBAAkB,kBAAM,EAAKY,WAAWC,IACxC7B,SAAU6B,a,GAvELhC,aCKvByC,IAASC,OACR,6BACE,kBAACC,EAAD,OAMDR,SAASC,eAAe,SLkHpB,kBAAmBQ,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a,mBMzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.2ba1308e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nclass Counter extends Component {\r\n  state = {\r\n    tasks: [],\r\n    all: true,\r\n  };\r\n\r\n  query = \"\";\r\n  addTask = () => {\r\n    let newTask = document.getElementById(\"inputTask\");\r\n    let repeat = this.state.tasks.map((task) => task.title == newTask.value);\r\n\r\n    if (newTask.value != \"\" && !repeat.includes(true)) {\r\n      let task = { title: newTask.value, status: false };\r\n      this.setState({ tasks: this.state.tasks.concat(task) });\r\n    }\r\n  };\r\n\r\n  switchTaskStatus = (index) => {\r\n    // let index = this.state.tasks.indexOf(task);\r\n    console.log(this.state.tasks);\r\n    // let stat = this.state.tasks[index].status;\r\n    let status=this.state.tasks[index].status;\r\n    //this.setState({ task[index].status: status ? false : true });\r\n    console.log(this.state.tasks[index]);\r\n  };\r\n\r\n  changeFilter = () => {\r\n    let opt = document.getElementById(\"filter\");\r\n    if (opt.value === \"All\") {\r\n      this.setState({ all: true });\r\n      console.log(opt.value+\" TRUE \"+this.state.all);\r\n    } else if(opt.value===\"Completed\" || opt.value===\"Pending\") {\r\n      this.setState({ all: false });\r\n      console.log(opt.value + \" FALSE \" + this.state.all);\r\n    }else{\r\n        console.log(\"no\");\r\n    }\r\n    console.log(opt.value+\" \"+this.state.all);\r\n  };\r\n\r\n  filterTask=(status) =>{\r\n    let  opt=document.getElementById(\"filter\");\r\n    if (opt.value==\"All\") return true;\r\n    else return true && status;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <input type=\"text\" id=\"inputTask\" />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-primary\"\r\n          onClick={this.addTask}\r\n        >\r\n          Add\r\n        </button>\r\n\r\n        <div>\r\n          <label for=\"filter\">Filter</label>\r\n          <select id=\"filter\" onChange={this.changeFilter}>\r\n            <option value=\"Completed\">Completed</option>\r\n            <option value=\"All\">All</option>\r\n            <option value=\"Pending\">Pending</option>\r\n          </select>\r\n        </div>\r\n        <ul>\r\n          {this.state.tasks\r\n            .filter((task) => {\r\n                if (this.state.all) return true\r\n            else return (true && this.status)})\r\n            .map((task,index) => (\r\n              <li>\r\n                <label for={task.title.split(\" \").join(\"\")}>{task.title}</label>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  id={task.title.split(\" \").join(\"\")}\r\n                  defaultChecked={task.status}\r\n                  onChange={()=>this.switchTaskStatus(index)}\r\n                />\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Counter;","import React, { Component } from 'react';\r\n\r\nclass task extends Component {\r\n    state = {  }\r\n    render() { \r\n        let taskData=this.props.taskData;\r\n        let id = \"T\" + String(taskData.id);\r\n        console.log(taskData);\r\n        return (\r\n          <div>\r\n            <li className=\"list-group-item md-1\">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\"md-1\"\r\n                onChange={this.props.handleStatusChange}\r\n                defaultChecked={taskData.status}\r\n                id={id}\r\n                />\r\n                {taskData.title}\r\n                <input type=\"button\" \r\n                className=\"btn btn-danger\" \r\n                value=\"Delete\" \r\n                onClick={this.props.handleDeleteTask} />\r\n            </li>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default task;","import React, { Component } from 'react'\r\n\r\nclass AddTask extends Component {\r\n    \r\n    render() { \r\n        return (\r\n          <div className=\"col-md-3\">\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"newTaskTitle\"\r\n                className=\"form-control\"\r\n                placeholder=\"Add new Task\"\r\n              />\r\n              <span className=\"input-group-btn\">\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  type=\"button\"\r\n                  onClick={this.props.handleAddTask}\r\n                >\r\n                  Add\r\n                </button>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React, { Component } from 'react';\r\nimport Task from './Task';\r\nimport AddTask from './AddTask';\r\n\r\nclass taskList extends Component {\r\n  state = { \r\n  id:2,\r\n  filter:\"All\",\r\n  filters:[\"All\",\"Completed\",\"Pending\"],\r\n  tasks:[\r\n    {title:\"Feed Fish\", status:false},\r\n    {title:\"Bake Cake\", status:true}\r\n    ]\r\n  }\r\n\r\n  switchStatus=(task)=>{\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.indexOf(task);\r\n    tasks[index].status=task.status?false:true;\r\n    this.setState(tasks);\r\n    console.log(this.state.tasks[index].status)\r\n  }\r\n\r\n  deleteTask=(task)=>{\r\n    let tasks = [...this.state.tasks];\r\n    tasks=tasks.filter((i)=>(i!=task));\r\n    this.setState({tasks:tasks});\r\n    console.log(tasks);\r\n  }\r\n\r\n  filterTasks=(task)=>{\r\n    if(this.state.filter==\"All\"){return true}\r\n    else{\r\n      if(this.state.filter==\"Completed\") {return (task.status)}\r\n      else{return (!task.status) }\r\n    }\r\n  }\r\n\r\n  addTask=()=>{\r\n    let title = document.getElementById(\"newTaskTitle\").value;\r\n    let tasks=this.state.tasks;\r\n    tasks.push({title:title, status:false});\r\n    this.setState(tasks);\r\n    console.log(tasks);\r\n  }\r\n\r\n\r\n  render() { \r\n      return (\r\n      <div>\r\n          \r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <div className=\"btn-group\" role=\"group\">\r\n          {this.state.filters.map((i) => (\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => this.setState({ filter: i })}\r\n              className=\"btn btn-default\">\r\n              {i}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </nav>\r\n\r\n      <AddTask\r\n        handleAddTask={this.addTask}\r\n      />\r\n\r\n          <ul className=\"list-group\">\r\n            {this.state.tasks\r\n              .filter((task) => this.filterTasks(task))\r\n              .map((i) => (\r\n                <Task\r\n                  handleStatusChange={() => this.switchStatus(i)}\r\n                  handleDeleteTask={() => this.deleteTask(i)}\r\n                  taskData={i}\r\n                ></Task>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n \r\nexport default taskList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Counter from './components/counter';\nimport Tasklist from './components/Tasklist';\n\nReactDOM.render(\n <div>\n   <Tasklist>\n\n   </Tasklist>\n \n </div>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}