{"version":3,"sources":["components/Task.jsx","components/Tasklist.jsx","components/AddTask.jsx","components/Filter.jsx","App.jsx","serviceWorker.js","index.js"],"names":["task","state","taskData","this","props","console","log","col","md-5","className","type","onChange","handleStatusChange","checked","status","title","value","onClick","handleDeleteTask","Component","taskList","tasks","filter","handleFilterTasks","map","i","Task","handleSwitchStatus","AddTask","id","placeholder","handleAddTask","Filter","role","filters","handleUpdateFilter","App","switchStatus","index","indexOf","setState","deleteTask","filterTasks","addTask","document","getElementById","trim","push","Tasklist","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0832f0d9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass task extends Component {\r\n    state = {  }\r\n    render() { \r\n        let taskData=this.props.taskData;\r\n        \r\n        console.log(taskData);\r\n        return (\r\n          <div col md-5>\r\n            <li className=\"list-group-item \">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\" \"\r\n                onChange={this.props.handleStatusChange}\r\n                checked={this.props.taskData.status}\r\n                \r\n                />\r\n                {taskData.title}\r\n                \r\n                <input type=\"button\" \r\n                className=\"btn btn-danger\" \r\n                value=\"Delete\" \r\n                onClick={this.props.handleDeleteTask} />\r\n              \r\n            </li>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default task;","import React, { Component } from 'react';\r\nimport Task from './Task'\r\n\r\n\r\nclass taskList extends Component {\r\n  \r\n\r\n  render() { \r\n      return (\r\n        <div>\r\n          <ul className=\"list-group\">\r\n            {this.props.tasks\r\n              .filter((task) => this.props.handleFilterTasks(task))\r\n              .map((i) => (\r\n                <Task\r\n                  handleStatusChange={() => this.props.handleSwitchStatus(i)}\r\n                  handleDeleteTask={() => this.props.handleDeleteTask(i)}\r\n                  taskData={i}\r\n                ></Task>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n \r\nexport default taskList;","import React, { Component } from 'react'\r\n\r\nclass AddTask extends Component {\r\n    \r\n    render() { \r\n        return (\r\n          <div className=\"col-md-3\">\r\n            <div className=\"input-group\">\r\n              <input\r\n                type=\"text\"\r\n                id=\"newTaskTitle\"\r\n                className=\"form-control\"\r\n                placeholder=\"Add new Task\"\r\n              />\r\n              <span className=\"input-group-btn\">\r\n                <button\r\n                  className=\"btn btn-default\"\r\n                  type=\"button\"\r\n                  onClick={this.props.handleAddTask}\r\n                >\r\n                  Add\r\n                </button>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React, { Component } from 'react'\r\n\r\nclass Filter extends Component {\r\n    render() { \r\n        return (\r\n          <nav className=\"navbar navbar-light bg-light\">\r\n            <div className=\"btn-group\" role=\"group\">\r\n              {this.props.filters.map((i) => (\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => this.props.handleUpdateFilter(i)}\r\n                  className=\"btn btn-default\"\r\n\r\n                >\r\n                  {i}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          </nav>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Filter;","import React, { Component } from \"react\";\nimport './App.css';\nimport Tasklist from './components/Tasklist';\nimport AddTask from './components/AddTask';\nimport Filter from './components/Filter'\n\nclass App extends Component {\n  state = { \n  id:2,\n  filter:\"All\",\n  filters:[\"All\",\"Completed\",\"Pending\"],\n  tasks:[\n    {title:\"Feed Fish\", status:false},\n    {title:\"Bake Cake\", status:true}\n    ]\n  }\n /*\n Functions: \n switchStatus(task) - Returns Nothing - Changes the status of a given task (parameter) from false to true and vice versa \n deleteTask(task) - Returns Nothing - Deletes the the given task(parameter) from the Todo List\n filterTasks(task) - Returns Boolean - Based on currently active filter, Tells if a given task(parameter) should be shown or not.\n addTask() - Returns Nothing - Adds the task in the input field to the Todo List.\n */\n\n  switchStatus=(task)=>{\n    const tasks = [...this.state.tasks];\n    const index = tasks.indexOf(task);\n    tasks[index].status=task.status?false:true;\n    this.setState(tasks);\n    console.log(this.state.tasks[index].status)\n  }\n\n   deleteTask=(task)=>{\n    let tasks = [...this.state.tasks];\n    tasks=tasks.filter((i)=>(i!=task));\n    this.setState({tasks:tasks});\n    console.log(tasks);\n  }\n\n   filterTasks=(task)=>{\n    if(this.state.filter==\"All\"){return true}\n    else{\n      if(this.state.filter==\"Completed\") {return (task.status)}\n      else{return (!task.status) }\n    }\n  }\n\n   addTask=()=>{\n    let title = document.getElementById(\"newTaskTitle\").value;\n    if(title.trim()!=\"\"){\n    let tasks=this.state.tasks;\n    tasks.push({title:title, status:false});\n    this.setState(tasks);\n      document.getElementById(\"newTaskTitle\").value=\"\";\n    }\n  }\n/*\nReturns the following Components:\nFilter\nAddTask\nTaskList\n*/ \n  render() { \n    return (\n      <div>\n        <Filter\n          handleUpdateFilter={(i) => this.setState({ filter: i })}\n          filters={this.state.filters}\n        />\n        \n        <AddTask handleAddTask={this.addTask} />\n        \n        <Tasklist\n          tasks={this.state.tasks}\n          handleFilterTasks={(i) => this.filterTasks(i)}\n          handleSwitchStatus={(i) => this.switchStatus(i)}\n          handleDeleteTask={(i) => this.deleteTask(i)}\n        ></Tasklist>\n      </div>\n    );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nimport Tasklist from './components/Tasklist';\n\nReactDOM.render(\n <div>\n   <App>\n\n   </App>\n \n </div>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}